if not report_generated:
        print("üîÑ Generating static analysis fallback report...")
        try:
            # Static analysis - scan for Kafka files without AI
            kafka_files = []
            code_diffs = []

            # Find files that likely contain Kafka usage
            for root, dirs, files in os.walk(args.repo_path):
                if ".git" in dirs:
                    dirs.remove(".git")
                for file in files:
                    if file.endswith(('.cs', '.java', '.js', '.ts', '.py')):
                        file_path = os.path.join(root, file)
                        try:
                            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                content = f.read()
                                if any(keyword.lower() in content.lower() for keyword in ['kafka', 'producer', 'consumer', 'confluent']):
                                    relative_path = os.path.relpath(file_path, args.repo_path)
                                    kafka_files.append({
                                        'file': relative_path,
                                        'kafka_apis': ['Kafka Producer', 'Kafka Consumer', 'Confluent.Kafka'],
                                        'summary': 'Kafka usage detected in static analysis'
                                    })
                                    code_diffs.append({
                                        'file': relative_path,
                                        'diff': f'''- // Original Kafka implementation\n+ // Recommended Azure Service Bus migration:\n+ using Azure.Messaging.ServiceBus;\n+ // Replace Kafka producers with ServiceBusClient\n+ // Replace Kafka consumers with ServiceBusReceiver\n+ // Update configuration to use Service Bus connection strings'''
                                    })
                        except Exception:
                            continue

            # Generate static migration report
            with open(report_path, "w", encoding="utf-8") as f:
                f.write("# Kafka ‚Üí Azure Service Bus Migration Report\n\n")
                f.write("*Generated by static analysis*\n\n")

                # Kafka inventory section
                f.write("## Kafka Inventory\n\n")
                if kafka_files:
                    f.write("Files in your repository that use Kafka APIs:\n\n")
                    f.write("| File | APIs Used | Summary |\n")
                    f.write("|------|-----------|---------|\n")
                    for item in kafka_files:
                        apis = ', '.join(item.get('kafka_apis', []))
                        f.write(f"| {item['file']} | {apis} | {item['summary']} |\n")
                else:
                    f.write("No Kafka usage detected in static analysis.\n")
                f.write("\n")

                # Code migrations section
                f.write("## Code Migrations\n\n")
                if code_diffs:
                    for diff in code_diffs:
                        f.write(f"### {diff['file']}\n")
                        f.write("```diff\n")
                        f.write(diff['diff'])
                        f.write("\n```\n\n")
                else:
                    f.write("No migration recommendations available from static analysis.\n")
                    f.write("Enable AI analysis for detailed migration guidance.\n\n")

            print(f"‚úÖ Static analysis report generated: {report_filename}")
            analysis_type = "Static Analysis Fallback"
            report_generated = True

        except Exception as e:
            print(f"‚ùå Static analysis fallback failed: {str(e)}")